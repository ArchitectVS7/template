databases:
  - name: webappdb
    databaseName: webappdb
    user: webappuser
    plan: free

services:
  # Backend API Service
  - type: web
    name: web-app-backend
    env: node
    plan: free
    buildCommand: cd backend && npm ci && npm run build
    startCommand: cd backend && npm start
    healthCheckPath: /api/health
    envVars:
      - key: NODE_ENV
        value: production
      - key: PORT
        value: 10000
      - key: DATABASE_URL
        fromDatabase:
          name: webappdb
          property: connectionString
      - key: JWT_SECRET
        generateValue: true
      - key: FRONTEND_URL
        fromService:
          type: web
          name: web-app-frontend
          property: host
    domains:
      - api.yourapp.com

  # Frontend Static Site
  - type: web
    name: web-app-frontend
    env: static
    plan: free
    buildCommand: cd frontend && npm ci && npm run build
    staticPublishPath: frontend/dist
    pullRequestPreviewsEnabled: true
    envVars:
      - key: VITE_API_URL
        fromService:
          type: web
          name: web-app-backend
          property: host
      - key: VITE_APP_NAME
        value: Web App Template
    headers:
      - path: /*
        name: X-Frame-Options
        value: DENY
      - path: /*
        name: X-Content-Type-Options
        value: nosniff
      - path: /*
        name: Referrer-Policy
        value: strict-origin-when-cross-origin
      - path: /*
        name: Permissions-Policy
        value: camera=(), microphone=(), geolocation=()
    routes:
      - type: rewrite
        source: /*
        destination: /index.html
    domains:
      - yourapp.com
      - www.yourapp.com

  # Background Worker (Optional for future use)
  - type: worker
    name: web-app-worker
    env: node
    plan: free
    buildCommand: cd backend && npm ci && npm run build
    startCommand: cd backend && node dist/worker.js
    envVars:
      - key: NODE_ENV
        value: production
      - key: DATABASE_URL
        fromDatabase:
          name: webappdb
          property: connectionString
      - key: JWT_SECRET
        sync: false

  # Cron Jobs
  - type: cron
    name: cleanup-sessions
    schedule: '0 2 * * *' # Daily at 2 AM
    buildCommand: cd backend && npm ci && npm run build
    startCommand: cd backend && node dist/scripts/cleanup-sessions.js
    envVars:
      - key: NODE_ENV
        value: production
      - key: DATABASE_URL
        fromDatabase:
          name: webappdb
          property: connectionString

  - type: cron
    name: health-check-monitor
    schedule: '*/5 * * * *' # Every 5 minutes
    buildCommand: cd backend && npm ci && npm run build
    startCommand: cd backend && node dist/scripts/health-monitor.js
    envVars:
      - key: NODE_ENV
        value: production
      - key: DATABASE_URL
        fromDatabase:
          name: webappdb
          property: connectionString
      - key: HEALTH_CHECK_URL
        fromService:
          type: web
          name: web-app-backend
          property: host
