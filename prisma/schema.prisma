// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  firstName   String?
  lastName    String?
  role        UserRole @default(USER)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  sessions        Session[]
  conversations   LLMConversation[]
  configurations  UserConfiguration[]
  debugLogs       DebugLog[]

  @@map("users")
}

model Session {
  id          String   @id @default(cuid())
  userId      String
  token       String   @unique
  refreshToken String? @unique
  expiresAt   DateTime
  userAgent   String?
  ipAddress   String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model LLMConversation {
  id          String   @id @default(cuid())
  userId      String
  title       String?
  model       String   @default("claude-3-sonnet-20240229")
  totalTokens Int      @default(0)
  totalCost   Float    @default(0.0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages LLMMessage[]

  @@map("llm_conversations")
}

model LLMMessage {
  id             String   @id @default(cuid())
  conversationId String
  role           String   // "user" or "assistant"
  content        String
  tokens         Int      @default(0)
  cost           Float    @default(0.0)
  createdAt      DateTime @default(now())

  // Relations
  conversation LLMConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("llm_messages")
}

model UserConfiguration {
  id       String @id @default(cuid())
  userId   String
  key      String
  value    String
  category String @default("general")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key])
  @@map("user_configurations")
}

model DebugLog {
  id        String   @id @default(cuid())
  userId    String?
  level     LogLevel
  message   String
  metadata  Json?
  component String?
  endpoint  String?
  method    String?
  statusCode Int?
  duration  Int?     // in milliseconds
  createdAt DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([level, createdAt])
  @@index([component, createdAt])
  @@index([userId, createdAt])
  @@map("debug_logs")
}

model SystemHealth {
  id          String   @id @default(cuid())
  component   String   // "database", "api", "websocket", etc.
  status      String   // "healthy", "warning", "critical"
  message     String?
  metadata    Json?
  responseTime Int?    // in milliseconds
  createdAt   DateTime @default(now())

  @@index([component, createdAt])
  @@map("system_health")
}
