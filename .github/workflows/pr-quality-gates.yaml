name: PR Quality Gates
#
# ðŸŽ¯ Only run on Pull Requests to main
on:
  pull_request:
    branches: [ main ]

jobs:
  # Frontend Quality Checks
  frontend-checks:
    name: Frontend Quality
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint:check
    
    - name: TypeScript type checking
      run: npm run type-check
    
    - name: Run unit tests
      run: npm run test
    
    - name: Build production bundle
      run: npm run build

  # Backend Quality Checks
  backend-checks:
    name: Backend Quality
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    # Test database service
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint:check
    
    - name: TypeScript type checking
      run: npm run type-check
    
    - name: Database migration (test)
      run: npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
    
    - name: Run unit tests
      run: npm run test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        JWT_SECRET: test-secret-key
    
    - name: Build production code
      run: npm run build

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Audit frontend dependencies
      run: |
        cd frontend
        npm audit --audit-level moderate
      continue-on-error: false
    
    - name: Audit backend dependencies
      run: |
        cd backend
        npm audit --audit-level moderate
      continue-on-error: false

  # Optional: Build verification
  build-verification:
    name: Full Build Test
    runs-on: ubuntu-latest
    needs: [frontend-checks, backend-checks]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install all dependencies
      run: |
        npm install
        cd frontend && npm ci
        cd ../backend && npm ci
    
    - name: Build everything
      run: |
        cd frontend && npm run build
        cd ../backend && npm run build
    
    - name: Verify builds work
      run: |
        echo "âœ… Frontend build size:"
        du -sh frontend/dist
        echo "âœ… Backend build files:"
        ls -la backend/dist
